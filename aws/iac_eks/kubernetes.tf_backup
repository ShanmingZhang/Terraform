data "external" "aws_iam_authenticator" {
  program = ["sh", "-c", "aws-iam-authenticator token -i ${var.iac-eks-cluster-name} | jq -r -c .status"]
}

provider "kubernetes" {
  host                   = aws_eks_cluster.iac_eks_cluster.endpoint
  cluster_ca_certificate = base64decode(aws_eks_cluster.iac_eks_cluster.certificate_authority.0.data)
  token                  = data.external.aws_iam_authenticator.result.token
  load_config_file       = false
  version                = "~> 1.5"
}


resource "kubernetes_config_map" "aws_auth" {
  metadata {
    name      = "aws-auth"
    namespace = "kube-system"
  }
  data = {
    mapRoles = <<EOF
- rolearn: ${aws_iam_role.iac_eks_worknodes_role.arn}
  username: system:node:{{EC2PrivateDNSName}}
  groups:
    - system:bootstrappers
    - system:nodes
EOF
  }
  depends_on = [
  aws_eks_cluster.iac_eks_cluster]
}



# generate KUBECONFIG as output to save in ~/.kube/config locally
# save the 'terraform output eks_kubeconfig > config', run 'mv config ~/.kube/config' to use it for kubectl
locals {
  kubeconfig = <<KUBECONFIG
 
 
apiVersion: v1
clusters:
- cluster:
    server: ${aws_eks_cluster.iac_eks_cluster.endpoint}
    certificate-authority-data: ${aws_eks_cluster.iac_eks_cluster.certificate_authority.0.data}
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: aws
  name: aws
current-context: aws
kind: Config
preferences: {}
users:
- name: aws
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      command: aws-iam-authenticator
      args:
        - "token"
        - "-i"
        - "${var.iac-eks-cluster-name}"
KUBECONFIG
}

output "eks_kubeconfig" {
  value = "${local.kubeconfig}"
  depends_on = [
    aws_eks_cluster.iac_eks_cluster
  ]
}

